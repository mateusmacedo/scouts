name: 'Go Validation'
description: 'Validate Go code with fmt, vet, mod tidy, lint and tests'

inputs:
  strategy:
    description: 'Execution strategy (affected or all)'
    required: true
    default: 'affected'
  base-ref:
    description: 'Base reference for affected strategy'
    required: false
    default: 'origin/main'

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      run: |
        echo "üì¶ Installing pnpm..."
        npm install -g pnpm@9.15.0
        echo "pnpm-version=$(pnpm --version)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install Dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "‚úÖ Dependencies installed"
      shell: bash

    - name: Check Go projects exist
      run: |
        if [ ! -d "apps/user-go-service" ] && [ ! -d "libs/user-go" ]; then
          echo "No Go projects found, skipping Go validation"
          exit 0
        fi
      shell: bash

    - name: Go Format Check
      run: |
        echo "üîç Checking Go formatting..."
        UNFORMATTED=$(go fmt -l ./apps/user-go-service ./libs/user-go 2>/dev/null || true)
        if [ -n "$UNFORMATTED" ]; then
          echo "‚ùå Unformatted Go files found:"
          echo "$UNFORMATTED"
          echo "Run 'go fmt ./apps/user-go-service ./libs/user-go' to fix"
          exit 1
        fi
        echo "‚úÖ Go formatting is correct"
      shell: bash

    - name: Go Vet
      run: |
        echo "üîç Running go vet..."
        go vet ./apps/user-go-service/... ./libs/user-go/...
        echo "‚úÖ Go vet passed"
      shell: bash

    - name: Go Mod Tidy
      run: |
        echo "üîç Checking go.mod files..."
        cd apps/user-go-service && go mod tidy
        cd ../../libs/user-go && go mod tidy
        echo "‚úÖ Go mod tidy completed"
      shell: bash

    - name: Go Lint
      run: |
        echo "üîç Running Go lint via Nx..."
        if [ "${{ inputs.strategy }}" = "affected" ]; then
          AFFECTED_PROJECTS=$(pnpm nx affected --target=lint --plain 2>/dev/null || echo "")
          if [ -z "$AFFECTED_PROJECTS" ] || [ "$AFFECTED_PROJECTS" = "No tasks were run" ]; then
            echo "‚ÑπÔ∏è No affected projects found for Go lint, skipping"
          else
            pnpm nx affected --target=lint
          fi
        else
          pnpm nx run-many --target=lint --all
        fi
        echo "‚úÖ Go lint passed"
      shell: bash

    - name: Sync Go Dependencies
      run: |
        echo "üîç Syncing Go dependencies..."
        ./scripts/sync-go-versions.sh
        echo "‚úÖ Go dependencies synced"
      shell: bash
