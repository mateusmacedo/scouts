name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR Title
        run: |
          echo "üîç Validating PR title..."
          TITLE="${{ github.event.pull_request.title }}"
          
          # Check if title follows Conventional Commits
          if echo "$TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|build|ci|perf|revert)(\(.+\))?: .+"; then
            echo "‚úÖ PR title follows Conventional Commits format"
          else
            echo "‚ùå PR title must follow Conventional Commits format"
            echo "Expected format: type(scope): description"
            echo "Examples:"
            echo "  feat: add new feature"
            echo "  fix(auth): resolve login issue"
            echo "  docs: update README"
            exit 1
          fi
        shell: bash

      - name: Validate Branch Name
        run: |
          echo "üîç Validating branch name..."
          BRANCH="${{ github.head_ref }}"
          
          # Check if branch follows naming convention
          if echo "$BRANCH" | grep -qE "^(feature|fix|docs|style|refactor|test|chore|build|ci|perf|revert)/.+"; then
            echo "‚úÖ Branch name follows convention"
          else
            echo "‚ùå Branch name must follow convention: type/description"
            echo "Examples:"
            echo "  feature/user-authentication"
            echo "  fix/login-bug"
            echo "  docs/api-documentation"
            exit 1
          fi
        shell: bash

      - name: Check for Conflicts
        run: |
          echo "üîç Checking for merge conflicts..."
          git fetch origin ${{ github.base_ref }}
          if ! git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "‚ùå Branch is not up to date with base branch"
            echo "Please rebase or merge the latest changes"
            exit 1
          fi
          echo "‚úÖ No conflicts detected"
        shell: bash

      - name: Check PR Size
        run: |
          echo "üîç Checking PR size..."
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          CHANGED_LINES=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{added+=$1; removed+=$2} END {print added+removed}')
          
          echo "Changed files: $CHANGED_FILES"
          echo "Changed lines: $CHANGED_LINES"
          
          # Limits (adjust as needed)
          MAX_FILES=50
          MAX_LINES=1000
          
          if [ "$CHANGED_FILES" -gt "$MAX_FILES" ]; then
            echo "‚ùå Too many files changed ($CHANGED_FILES > $MAX_FILES)"
            echo "Consider splitting this PR into smaller ones"
            exit 1
          fi
          
          if [ "$CHANGED_LINES" -gt "$MAX_LINES" ]; then
            echo "‚ùå Too many lines changed ($CHANGED_LINES > $MAX_LINES)"
            echo "Consider splitting this PR into smaller ones"
            exit 1
          fi
          
          echo "‚úÖ PR size is acceptable"
        shell: bash

      - name: Comment PR Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Validation Status')
            );
            
            const status = '${{ job.status }}' === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const body = `## PR Validation Status
            
            **Status:** ${status}
            
            - ‚úÖ PR Title follows Conventional Commits
            - ‚úÖ Branch name follows convention  
            - ‚úÖ No merge conflicts
            - ‚úÖ PR size is acceptable
            
            ${status === '‚úÖ PASSED' ? 'Ready for review!' : 'Please address the issues above.'}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
