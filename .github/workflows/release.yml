name: Release

# Comportamento do workflow:
# - workflow_dispatch: Execu√ß√£o manual com op√ß√£o de dry-run
# - pull_request (main): Sempre dry-run para valida√ß√£o
# - push (main): Execu√ß√£o real do release
on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Executar em modo dry-run (n√£o publica)'
        type: boolean
        default: true
      version-specifier:
        description: 'Especificador de vers√£o (deixe vazio para auto via conventional commits)'
        type: string
        required: false
      skip-validation:
        description: 'Pular valida√ß√µes de consist√™ncia (n√£o recomendado)'
        type: boolean
        default: false
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.23'
  PNPM_VERSION: '9'

jobs:
  validate:
    name: Validate Release Consistency
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip-validation }}
    timeout-minutes: 8
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', 'nx.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', 'nx.json') }}-
            nx-${{ runner.os }}-

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
          restore-keys: |
            go-${{ runner.os }}-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            apps/*/dist/
            libs/*/dist/
          key: build-${{ runner.os }}-${{ hashFiles('**/package.json', '**/tsconfig*.json') }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('**/package.json', '**/tsconfig*.json') }}-
            build-${{ runner.os }}-

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            apps/user-go-service/go.sum
            libs/user-go/go.sum

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Detect First Release & Check NPM
        id: release-type
        run: |
          echo "üîç Verificando se √© primeira release dos projetos..."
          FIRST_RELEASE=true
          
          for pkg in logger-node utils-nest user-node; do
            if npm view "@scouts/$pkg" version > /dev/null 2>&1; then
              echo "üì¶ Package @scouts/$pkg j√° existe no NPM"
              FIRST_RELEASE=false
            fi
          done
          
          echo "first_release=$FIRST_RELEASE" >> $GITHUB_OUTPUT
          
          if [[ "$FIRST_RELEASE" == "true" ]]; then
            echo "üéâ PRIMEIRA RELEASE detectada"
          else
            echo "üîÑ Release subsequente dos projetos"
          fi

      - name: Setup script permissions
        run: chmod +x scripts/validate-release-consistency.sh

      - name: Run validation script
        run: ./scripts/validate-release-consistency.sh

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && (needs.validate.outputs.validation-result == 'success' || inputs.skip-validation == true)
    timeout-minutes: 20
    outputs:
      execution-mode: ${{ steps.execution-mode.outputs.mode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
          token: ${{ secrets.GH_TOKEN }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', 'nx.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', 'nx.json') }}-
            nx-${{ runner.os }}-

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
          restore-keys: |
            go-${{ runner.os }}-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            apps/*/dist/
            libs/*/dist/
          key: build-${{ runner.os }}-${{ hashFiles('**/package.json', '**/tsconfig*.json') }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('**/package.json', '**/tsconfig*.json') }}-
            build-${{ runner.os }}-

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@scouts'
          cache: 'pnpm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            apps/user-go-service/go.sum
            libs/user-go/go.sum

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Print Environment Info
        run: pnpm nx report

      - name: Build affected projects
        run: pnpm nx affected -t build --parallel=3

      - name: Determine execution mode
        id: execution-mode
        run: |
          # Para workflow_dispatch, usar input do usu√°rio
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "mode=dry-run" >> $GITHUB_OUTPUT
              echo "üîç Modo dry-run selecionado manualmente"
            else
              echo "mode=release" >> $GITHUB_OUTPUT
              echo "üöÄ Modo release selecionado manualmente"
            fi
          # Para PRs, sempre dry-run
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "mode=dry-run" >> $GITHUB_OUTPUT
            echo "üîç PR detectado - executando em modo dry-run"
          # Para push na main, executar release real
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "mode=release" >> $GITHUB_OUTPUT
            echo "üöÄ Push na main detectado - executando release real"
          else
            echo "mode=dry-run" >> $GITHUB_OUTPUT
            echo "üîç Trigger n√£o reconhecido - executando em modo dry-run por seguran√ßa"
          fi

      - name: Release (Version & Changelog)
        run: |
          if [[ "${{ steps.execution-mode.outputs.mode }}" == "dry-run" ]]; then
            echo "üîç Executando em modo dry-run..."
            pnpm nx release --dry-run
          else
            if [[ "${{ needs.validate.outputs.first-release }}" == "true" ]]; then
              echo "üéâ Executando PRIMEIRA RELEASE dos projetos..."
              echo "‚ÑπÔ∏è  Esta √© a primeira publica√ß√£o dos packages no NPM"
            else
              echo "üîÑ Executando release subsequente..."
            fi
            pnpm nx release --skip-publish
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Setup sync script permissions
        if: ${{ steps.execution-mode.outputs.mode == 'release' }}
        run: chmod +x scripts/sync-go-versions.sh

      - name: Sync Go dependencies
        if: ${{ steps.execution-mode.outputs.mode == 'release' }}
        run: |
          ./scripts/sync-go-versions.sh

          # Commit se houver mudan√ßas
          if [[ -n $(git status -s apps/user-go-service/) ]]; then
            GO_USER_VERSION=$(node -p "require('./libs/user-go/package.json').version")
            git add apps/user-go-service/go.mod apps/user-go-service/go.sum
            git commit -m "chore(user-go-service): sync user-go dependency to v${GO_USER_VERSION}"
          fi

      - name: Publish packages
        if: ${{ steps.execution-mode.outputs.mode == 'release' }}
        run: pnpm nx release publish --force
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Push changes and tags
        if: ${{ steps.execution-mode.outputs.mode == 'release' }}
        run: |
          git push origin ${{ github.ref_name }}
          git push --tags

      - name: Create GitHub Release
        if: ${{ steps.execution-mode.outputs.mode == 'release' }}
        run: |
          echo "üìù GitHub Release ser√° criado automaticamente pelo Nx Release"
          echo "Verifique em: https://github.com/${{ github.repository }}/releases"

  rollback:
    name: Rollback (if needed)
    runs-on: ubuntu-latest
    needs: [release]
    if: failure() && needs.release.outputs.execution-mode == 'release'
    timeout-minutes: 3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Capture current state
        id: current
        run: |
          echo "tags=$(git tag --points-at HEAD | grep '@scouts/' | tr '\n' ' ' || echo '')" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "is_release_commit=$(git log -1 --pretty=%B | grep -q 'chore(release)' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Rollback changes
        run: |
          TAGS="${{ steps.current.outputs.tags }}"
          IS_RELEASE="${{ steps.current.outputs.is_release_commit }}"
          
          echo "üîÑ Executando rollback seguro..."
          
          # 1. Deletar apenas tags criadas NESTE release (apontam para HEAD)
          if [[ -n "$TAGS" ]]; then
            echo "Deletando tags criadas nesta execu√ß√£o:"
            for tag in $TAGS; do
              echo "  - $tag"
              git push --delete origin "$tag" 2>/dev/null || true
              git tag -d "$tag"
            done
          else
            echo "‚ÑπÔ∏è  Nenhuma tag criada nesta execu√ß√£o"
          fi
          
          # 2. Reverter commit apenas se for commit de release
          if [[ "$IS_RELEASE" == "true" ]]; then
            echo "Revertendo commit de release..."
            git revert HEAD --no-edit
            git push origin ${{ github.ref_name }}
          else
            echo "‚ÑπÔ∏è  √öltimo commit n√£o √© de release, nada a reverter"
          fi
          
          echo "‚úÖ Rollback conclu√≠do"

      - name: Final notification
        run: |
          echo "‚ùå Release falhou e foi revertido"
          echo "üìã Tags deletadas: ${{ steps.current.outputs.tags }}"
          echo "üîç Verifique os logs para identificar o problema"
          echo "üîÑ Execute novamente ap√≥s corre√ß√µes"