name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version-specifier:
        description: 'Version specifier (opcional - deixe vazio para conventional commits)'
        type: string
        required: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  id-token: write

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.23'
  PNPM_VERSION: '9'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@scouts'
          cache: 'pnpm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            apps/user-go-service/go.sum
            libs/user-go/go.sum

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Validate Go sync before release
        run: |
          echo "üîç Validando sincroniza√ß√£o Go..."
          chmod +x scripts/sync-go-versions.sh
          ./scripts/sync-go-versions.sh
          
          if [[ -n $(git status -s apps/user-go-service/go.mod apps/user-go-service/go.sum) ]]; then
            echo "‚ùå go.mod desatualizado! Execute: pnpm nx run scouts/user-go-service:sync-go-deps"
            git diff apps/user-go-service/go.mod
            exit 1
          fi
          echo "‚úÖ go.mod sincronizado"

      - name: Release (Version & Changelog)
        run: |
          echo "üöÄ Executando Nx Release..."
          if [[ -n "${{ inputs.version-specifier }}" ]]; then
            echo "‚ÑπÔ∏è  Usando version specifier: ${{ inputs.version-specifier }}"
            pnpm nx release --skip-publish ${{ inputs.version-specifier }}
          else
            echo "‚ÑπÔ∏è  Usando conventional commits para versionamento"
            pnpm nx release --skip-publish
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Sync Go dependencies post-release
        run: |
          echo "üîÑ Sincronizando depend√™ncias Go p√≥s-release..."
          ./scripts/sync-go-versions.sh
          
          # Commit apenas se houver mudan√ßas
          if [[ -n $(git status -s apps/user-go-service/) ]]; then
            GO_USER_VERSION=$(node -p "require('./libs/user-go/package.json').version")
            git add apps/user-go-service/go.mod apps/user-go-service/go.sum
            git commit -m "chore(user-go-service): sync user-go dependency to v${GO_USER_VERSION}"
            echo "‚úÖ Depend√™ncias Go sincronizadas e commitadas"
          else
            echo "‚ÑπÔ∏è  Nenhuma mudan√ßa em depend√™ncias Go"
          fi

      - name: Publish packages
        run: |
          echo "üì¶ Publicando packages no NPM..."
          pnpm nx release publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Push changes and tags
        run: |
          echo "üîÄ Enviando mudan√ßas e tags para reposit√≥rio..."
          git push origin ${{ github.ref_name }}
          git push --tags
          echo "‚úÖ Release conclu√≠do com sucesso!"
