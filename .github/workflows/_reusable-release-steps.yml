name: Reusable Release Steps

on:
  workflow_call:
    inputs:
      dry-run:
        type: boolean
        default: true
      skip-validation:
        type: boolean
        default: false
    outputs:
      first-release:
        value: ${{ jobs.validate.outputs.first-release }}

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.23'
  PNPM_VERSION: '9'

jobs:
  validate:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip-validation }}
    outputs:
      first-release: ${{ steps.first-release.outputs.first_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', 'nx.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', 'nx.json') }}-
            nx-${{ runner.os }}-

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
          restore-keys: |
            go-${{ runner.os }}-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            apps/*/dist/
            libs/*/dist/
          key: build-${{ runner.os }}-${{ hashFiles('**/package.json', '**/tsconfig*.json') }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('**/package.json', '**/tsconfig*.json') }}-
            build-${{ runner.os }}-

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            apps/user-go-service/go.sum
            libs/user-go/go.sum

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Detect first release
        id: first-release
        run: |
          echo "üîç Verificando se √© primeira release dos projetos..."
          FIRST_RELEASE=true
          
          for project in logger-node utils-nest user-node; do
            PACKAGE_NAME="@scouts/$project"
            if npm view "$PACKAGE_NAME" version > /dev/null 2>&1; then
              echo "üì¶ $PACKAGE_NAME j√° existe no registry"
              FIRST_RELEASE=false
            else
              echo "üÜï $PACKAGE_NAME ser√° publicado pela primeira vez"
            fi
          done
          
          echo "first_release=$FIRST_RELEASE" >> $GITHUB_OUTPUT
          if [[ "$FIRST_RELEASE" == "true" ]]; then
            echo "üéâ Esta ser√° a PRIMEIRA RELEASE dos projetos!"
            echo "‚ÑπÔ∏è  Valida√ß√µes ser√£o ajustadas para primeira release"
          else
            echo "üîÑ Release subsequente dos projetos"
          fi

      - name: Setup script permissions
        run: chmod +x scripts/validate-release-consistency.sh

      - name: Run validation script
        run: ./scripts/validate-release-consistency.sh

      - name: Dry run release
        if: ${{ inputs.dry-run }}
        run: |
          echo "üîç Executando dry-run do release..."
          pnpm nx release --dry-run

  check-go-sync:
    name: Check Go Dependencies Sync
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip-validation }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
          restore-keys: |
            go-${{ runner.os }}-

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            apps/user-go-service/go.sum
            libs/user-go/go.sum

      - name: Setup script permissions
        run: chmod +x scripts/sync-go-versions.sh

      - name: Check sync
        run: |
          ./scripts/sync-go-versions.sh
          if [[ -n $(git status -s apps/user-go-service/go.mod apps/user-go-service/go.sum) ]]; then
            echo "‚ùå go.mod est√° desatualizado!"
            echo "Execute: pnpm nx run @scouts/user-go-service:sync-go-deps"
            git diff apps/user-go-service/go.mod
            exit 1
          fi
          echo "‚úÖ go.mod est√° sincronizado"
