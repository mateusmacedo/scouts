name: Performance Analysis

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      analysis-type:
        description: 'Type of analysis to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - cache-only
          - build-only
          - test-only

permissions:
  contents: read
  pull-requests: read

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9.15.0"
  GO_VERSION: "1.23"

jobs:
  performance-analysis:
    name: CI/CD Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure pnpm store
        run: pnpm config set store-dir $HOME/.pnpm-store

      - name: Verify pnpm installation
        run: pnpm --version

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: $HOME/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Restore Go cache
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/go-build
            $HOME/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/pnpm-lock.yaml', 'nx.json', 'tsconfig.base.json', 'jest.config.ts', 'jest.preset.js') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clear Nx cache for fresh analysis
        run: pnpm nx reset

      - name: Analyze workspace structure
        run: |
          echo "## 📊 Workspace Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Project Count" >> $GITHUB_STEP_SUMMARY
          pnpm nx show projects --json | jq 'length' | xargs -I {} echo "- Total projects: {}" >> $GITHUB_STEP_SUMMARY
          
          echo "### Project Types" >> $GITHUB_STEP_SUMMARY
          pnpm nx show projects --json | jq -r '.[] | .type' | sort | uniq -c | while read count type; do
            echo "- $type: $count" >> $GITHUB_STEP_SUMMARY
          done

      - name: Cache Analysis
        if: ${{ inputs.analysis-type == 'full' || inputs.analysis-type == 'cache-only' }}
        run: |
          echo "## 🗄️ Cache Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Analyze cache directory size
          if [ -d ".nx/cache" ]; then
            CACHE_SIZE=$(du -sh .nx/cache | cut -f1)
            echo "- Current cache size: $CACHE_SIZE" >> $GITHUB_STEP_SUMMARY
          else
            echo "- No cache directory found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Analyze cache effectiveness
          echo "### Cache Effectiveness Test" >> $GITHUB_STEP_SUMMARY
          
          # First run (cold cache)
          echo "Running first build (cold cache)..." >> $GITHUB_STEP_SUMMARY
          time pnpm nx run-many -t build --parallel=3 > /tmp/first-build.log 2>&1
          FIRST_TIME=$(grep -o 'real.*' /tmp/first-build.log | head -1 || echo "N/A")
          echo "- First build time: $FIRST_TIME" >> $GITHUB_STEP_SUMMARY
          
          # Second run (warm cache)
          echo "Running second build (warm cache)..." >> $GITHUB_STEP_SUMMARY
          time pnpm nx run-many -t build --parallel=3 > /tmp/second-build.log 2>&1
          SECOND_TIME=$(grep -o 'real.*' /tmp/second-build.log | head -1 || echo "N/A")
          echo "- Second build time: $SECOND_TIME" >> $GITHUB_STEP_SUMMARY
          
          # Cache hit analysis
          CACHE_HITS=$(grep -c "read the output from the cache" /tmp/second-build.log || echo "0")
          TOTAL_TASKS=$(grep -c "Successfully ran target" /tmp/second-build.log || echo "0")
          echo "- Cache hits: $CACHE_HITS" >> $GITHUB_STEP_SUMMARY
          echo "- Total tasks: $TOTAL_TASKS" >> $GITHUB_STEP_SUMMARY
          
          if [ "$TOTAL_TASKS" -gt 0 ]; then
            HIT_RATE=$((CACHE_HITS * 100 / TOTAL_TASKS))
            echo "- Cache hit rate: $HIT_RATE%" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Build Performance Analysis
        if: ${{ inputs.analysis-type == 'full' || inputs.analysis-type == 'build-only' }}
        run: |
          echo "## 🏗️ Build Performance Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Clear cache for accurate measurement
          pnpm nx reset
          
          echo "### Parallel Build Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Test different parallel levels
          for parallel in 1 2 3 5; do
            echo "Testing with --parallel=$parallel..." >> $GITHUB_STEP_SUMMARY
            start_time=$(date +%s)
            pnpm nx run-many -t build --parallel=$parallel > /tmp/build-$parallel.log 2>&1
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "- Parallel $parallel: ${duration}s" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "### Affected vs Full Build Comparison" >> $GITHUB_STEP_SUMMARY
          
          # Full build
          start_time=$(date +%s)
          pnpm nx run-many -t build --parallel=3 > /tmp/full-build.log 2>&1
          end_time=$(date +%s)
          full_duration=$((end_time - start_time))
          echo "- Full build time: ${full_duration}s" >> $GITHUB_STEP_SUMMARY
          
          # Affected build (simulate small change)
          start_time=$(date +%s)
          pnpm nx affected -t build --parallel=3 > /tmp/affected-build.log 2>&1
          end_time=$(date +%s)
          affected_duration=$((end_time - start_time))
          echo "- Affected build time: ${affected_duration}s" >> $GITHUB_STEP_SUMMARY
          
          if [ "$full_duration" -gt 0 ]; then
            efficiency=$((100 - (affected_duration * 100 / full_duration)))
            echo "- Efficiency gain: $efficiency%" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test Performance Analysis
        if: ${{ inputs.analysis-type == 'full' || inputs.analysis-type == 'test-only' }}
        run: |
          echo "## 🧪 Test Performance Analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Execution Times" >> $GITHUB_STEP_SUMMARY
          
          # Test with different parallel levels
          for parallel in 1 2 3 5; do
            echo "Testing with --parallel=$parallel..." >> $GITHUB_STEP_SUMMARY
            start_time=$(date +%s)
            pnpm nx run-many -t test --parallel=$parallel > /tmp/test-$parallel.log 2>&1
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "- Parallel $parallel: ${duration}s" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "### Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -d "coverage" ]; then
            COVERAGE_SIZE=$(du -sh coverage | cut -f1)
            echo "- Coverage report size: $COVERAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Memory and Resource Analysis
        run: |
          echo "## 💾 Resource Analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "### System Resources" >> $GITHUB_STEP_SUMMARY
          echo "- CPU cores: $(nproc)" >> $GITHUB_STEP_SUMMARY
          echo "- Memory: $(free -h | grep Mem | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "- Disk space: $(df -h . | tail -1 | awk '{print $4}')" >> $GITHUB_STEP_SUMMARY
          
          echo "### Node.js Memory Usage" >> $GITHUB_STEP_SUMMARY
          node --max-old-space-size=4096 -e "console.log('Max old space: 4GB')" || echo "Node memory limit: default" >> $GITHUB_STEP_SUMMARY

      - name: Generate Performance Report
        run: |
          echo "## 📈 Performance Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Use `nx affected` for incremental builds" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Leverage cache for faster subsequent runs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Use appropriate parallel levels (3-5 for most cases)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Monitor cache hit rates for optimization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Consider Nx Cloud for distributed task execution if build times exceed 10 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor cache effectiveness and adjust cache keys if needed" >> $GITHUB_STEP_SUMMARY
          echo "- Review and optimize test execution times" >> $GITHUB_STEP_SUMMARY

      - name: Upload Performance Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-${{ github.run_number }}
          path: |
            /tmp/*.log
            coverage/
            .nx/cache
          retention-days: 30
