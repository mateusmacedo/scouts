name: CI Development

on:
  push:
    branches: [ feat/*, feature/*, bugfix/*, hotfix/* ]
  pull_request:
    branches: [ develop ]

jobs:
  development-check:
    name: Development Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Detect Changes
        id: changes
        run: |
          echo "🔍 Detectando tipos de mudanças..."
          if git diff --name-only HEAD~1 | grep -E '\.(ts|js|tsx|jsx)$' > /dev/null; then
            echo "has_js_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Mudanças em TypeScript/JavaScript detectadas"
          else
            echo "has_js_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Nenhuma mudança em TypeScript/JavaScript"
          fi
          
          if git diff --name-only HEAD~1 | grep -E '\.(go)$' > /dev/null; then
            echo "has_go_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Mudanças em Go detectadas"
          else
            echo "has_go_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Nenhuma mudança em Go"
          fi

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        id: node-pnpm-setup
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GL_TOKEN }}

      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          has-go-changes: ${{ steps.changes.outputs.has_go_changes }}
        id: go-setup

      - name: Restore Nx cache
        uses: ./.github/actions/restore-nx-cache
        id: nx-cache

      - name: Set base reference for affected calculations
        id: base-ref
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "base_ref=origin/${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            echo "base_ref=HEAD~1" >> $GITHUB_OUTPUT
          fi

      - name: Quick Quality Check
        continue-on-error: true
        if: steps.changes.outputs.has_js_changes == 'true'
        run: |
          echo "🔍 Executando verificações rápidas (não bloqueantes)..."

          timeout 180 pnpm nx affected --target=lint --base=${{ steps.base-ref.outputs.base_ref }} --parallel=3 &
          timeout 180 pnpm nx affected --target=format --base=${{ steps.base-ref.outputs.base_ref }} --parallel=3 &
          timeout 180 pnpm nx affected --target=typecheck --base=${{ steps.base-ref.outputs.base_ref }} --parallel=3 &

          wait

          echo "✅ Verificações rápidas concluídas"

      - name: Run Tests
        run: |
          echo "🧪 Executando testes (obrigatório)..."
          
          # Verificar projetos com target test disponível
          echo "🔍 Procurando projetos com testes..."
          PROJECTS_WITH_TESTS=$(pnpm nx show projects --with-target=test)
          
          if [ -z "$PROJECTS_WITH_TESTS" ]; then
            echo "ℹ️ Nenhum projeto com target 'test' encontrado."
          else
            echo "✅ Projetos com testes disponíveis:"
            echo "$PROJECTS_WITH_TESTS"
            
            # Executar testes apenas para projetos afetados que têm target test
            echo "🧪 Executando testes em projetos afetados..."
            timeout 300 pnpm nx affected --target=test --base=${{ steps.base-ref.outputs.base_ref }} --parallel=3 || {
              echo "⚠️ Alguns testes falharam ou nenhum projeto afetado tem testes"
            }
          fi
          
          # Verificar projetos Go (apenas se houver mudanças em Go)
          if [ "${{ steps.changes.outputs.has_go_changes }}" = "true" ] && pnpm nx show projects --with-target=test > /dev/null 2>&1; then
            echo "🧪 Executando testes Go em projetos afetados..."
            timeout 300 pnpm nx affected --target=test --base=${{ steps.base-ref.outputs.base_ref }} --parallel=3 || {
              echo "⚠️ Alguns testes Go falharam ou nenhum projeto afetado tem testes Go"
            }
          elif [ "${{ steps.changes.outputs.has_go_changes }}" = "false" ]; then
            echo "ℹ️ Nenhuma mudança em Go - pulando testes Go"
          else
            echo "ℹ️ Nenhum projeto com target 'test' encontrado."
          fi
          
          echo "✅ Testes concluídos"

      # E2E Tests removidos do desenvolvimento para velocidade
      # E2E é executado apenas no ci-quality-gate.yml para main/develop

      - name: Quick Build Check
        continue-on-error: true
        if: steps.changes.outputs.has_js_changes == 'true' || steps.changes.outputs.has_go_changes == 'true'
        run: |
          echo "🏗️ Verificação rápida de build (não bloqueante)..."
          timeout 180 pnpm nx affected --target=build --base=${{ steps.base-ref.outputs.base_ref }} --parallel=3
          echo "✅ Build check concluído"

      - name: Development Check Summary
        if: always()
        run: |
          echo "🎉 Verificação de desenvolvimento concluída!"
          echo "📊 Verificações executadas:"
          echo "  ⚠️ Lint Check (não bloqueante)"
          echo "  ⚠️ Format Check (não bloqueante)"
          echo "  ⚠️ Type Check (não bloqueante)"
          echo "  ✅ Tests (obrigatório)"
          echo "  ✅ Go Tests (obrigatório)"
          echo "  ⚠️ Build Check (não bloqueante)"
          echo ""
          echo "💡 Nota: Em desenvolvimento, apenas testes são obrigatórios."
          echo "   Lint, format, typecheck e build são recomendados mas não bloqueiam."
