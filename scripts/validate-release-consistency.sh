#!/usr/bin/env bash
set -e

echo "üîç Valida√ß√£o de Consist√™ncia de Release"
echo "======================================="

# Verificar se estamos em um branch de release ou main
if [[ ! "$GITHUB_REF" =~ ^refs/heads/(release/|main$) ]]; then
    echo "‚ö†Ô∏è  Este script deve ser executado apenas em branches release/** ou main"
    echo "Branch atual: $GITHUB_REF"
    echo "Continuando com valida√ß√£o..."
fi

# Lista de padr√µes de arquivos/diret√≥rios permitidos para mudan√ßas
# - Documenta√ß√£o e guias
# - Arquivos de configura√ß√£o do editor/IDE
# - Arquivos de permiss√£o de scripts (mode-only changes)
ALLOWED_PATTERNS=(
    "^AGENTS.md"
    "^README.md"
    "^\.cursor/"
    "^\.vscode/"
    "^\.editorconfig"
    "^\.gemini/"
    "^docs/"
    "^scripts/.*\.sh$"
)

# Fun√ß√£o para verificar se um arquivo corresponde aos padr√µes permitidos
is_allowed_change() {
    local file="$1"
    for pattern in "${ALLOWED_PATTERNS[@]}"; do
        if [[ "$file" =~ $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# Verificar se h√° mudan√ßas n√£o commitadas
PORCELAIN_OUTPUT=$(git status --porcelain)
if [[ -n "$PORCELAIN_OUTPUT" ]]; then
    echo "‚ö†Ô∏è  Detectadas mudan√ßas n√£o commitadas:"
    echo "$PORCELAIN_OUTPUT"
    echo ""
    
    # Filtrar mudan√ßas cr√≠ticas (excluindo arquivos permitidos)
    CRITICAL_CHANGES=""
    while IFS= read -r line; do
        # Extrair o nome do arquivo (remover o prefixo de status)
        file=$(echo "$line" | sed 's/^...//g')
        
        # Verificar se √© uma mudan√ßa permitida
        if ! is_allowed_change "$file"; then
            CRITICAL_CHANGES="${CRITICAL_CHANGES}${line}\n"
        else
            echo "‚ÑπÔ∏è  Mudan√ßa permitida: $file"
        fi
    done <<< "$PORCELAIN_OUTPUT"
    
    # Se houver mudan√ßas cr√≠ticas, falhar
    if [[ -n "$CRITICAL_CHANGES" ]]; then
        echo ""
        echo "‚ùå H√° mudan√ßas cr√≠ticas n√£o commitadas:"
        echo -e "$CRITICAL_CHANGES"
        exit 1
    fi
    
    echo ""
    echo "‚úÖ Todas as mudan√ßas detectadas s√£o permitidas"
fi

# Verificar se pnpm est√° dispon√≠vel
if ! command -v pnpm &> /dev/null; then
    echo "‚ùå pnpm n√£o est√° instalado"
    exit 1
fi

# Verificar se nx est√° dispon√≠vel
if ! command -v nx &> /dev/null; then
    echo "‚ùå nx n√£o est√° instalado"
    exit 1
fi

# Verificar se Go est√° dispon√≠vel
if ! command -v go &> /dev/null; then
    echo "‚ùå go n√£o est√° instalado"
    exit 1
fi

# Verificar sincroniza√ß√£o Go
echo "üîÑ Verificando sincroniza√ß√£o Go..."
if ! ./scripts/sync-go-versions.sh; then
    echo "‚ùå Falha na sincroniza√ß√£o Go"
    exit 1
fi

# Dry run do nx release
echo "üß™ Executando dry-run do nx release..."
if ! pnpm nx release --dry-run; then
    echo "‚ùå Dry-run do nx release falhou"
    exit 1
fi

# Verificar consist√™ncia de tags
echo "üè∑Ô∏è  Verificando consist√™ncia de tags..."
if ! git tag -l | grep -q "@scouts/"; then
    echo "‚ÑπÔ∏è  Nenhuma tag @scouts/* encontrada (OK para primeira release)"
else
    echo "‚ÑπÔ∏è  Tags @scouts/* encontradas:"
    git tag -l | grep "@scouts/"
fi

# Verificar configura√ß√£o Nx
echo "‚öôÔ∏è  Verificando configura√ß√£o Nx..."
if ! pnpm nx show projects --json > /dev/null; then
    echo "‚ùå Falha ao listar projetos Nx"
    exit 1
fi

echo "‚úÖ Valida√ß√£o de consist√™ncia conclu√≠da com sucesso"